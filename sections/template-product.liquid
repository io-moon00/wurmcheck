{% assign selected_variant = product.selected_or_first_available_variant %}

<div class="bg-white">
    <div class="mx-auto max-w-2xl px-4 py-16 sm:px-6 sm:py-24 lg:max-w-7xl lg:px-8">
      <div class="lg:grid lg:grid-cols-2 lg:items-start lg:gap-x-8">
        <!-- Image gallery -->
        <div class="flex flex-col-reverse sticky top-5 p-2">
            <!-- Image selector -->
            <div class="mx-auto mt-6 hidden w-full max-w-2xl sm:block lg:max-w-none">
            <div class="grid grid-cols-4 gap-6" aria-orientation="horizontal" role="tablist">
                {% for media in product.media %}
                <button id="tabs-{{ forloop.index0 }}-tab-1" class="relative flex h-24 cursor-pointer items-center justify-center rounded-md bg-white text-sm font-medium text-gray-900 uppercase hover:bg-gray-50 focus:ring-3 focus:ring-blue/50 focus:ring-offset-4 focus:outline-hidden" aria-controls="tabs-{{ forloop.index0 }}-panel-1" role="tab" type="button">
                    <span class="sr-only">Angled view</span>
                    <span class="absolute inset-0 overflow-hidden rounded-md">
                    {% render 'product-media', media:media %}
                    </span>
                    <!-- Selected: "ring-indigo-500", Not Selected: "ring-transparent" -->
                    <span class="pointer-events-none absolute inset-0 rounded-md ring-2 ring-transparent ring-offset-2" aria-hidden="true"></span>
                </button>
                {% endfor %}
                <!-- More images... -->
            </div>
            </div>
        
            <div>
            <!-- Tab panel, show/hide based on tab state. -->
            {% for media in product.media %}
                <div id="tabs-{{ forloop.index0 }}-panel-1" aria-labelledby="tabs-{{ forloop.index0 }}-tab-1" role="tabpanel" tabindex="0" class="hidden">
                {% render 'product-media', media:media %}
                </div>
            {% endfor %}
            <!-- More images... -->
            </div>
        </div>
  
        <!-- Product info -->
        <div class="mt-10 px-4 sm:mt-16 sm:px-0 lg:mt-0">
        {% form 'product', product, id: 'product-form', novalidate: 'novalidate' %}
            <input type="hidden" name="id" value="{{ selected_variant.id }}">
        
        {% for block in section.blocks %}
            {% case block.type %}
              {% when 'vendor' %}
                <span class="block text-xs uppercase font-medium text-gray-500">{{ product.vendor }}</span>
              {% when 'title' %}
                <h1 class="text-3xl font-bold tracking-tight text-gray-900">{{ product.title }}</h1>
              {% when 'price' %}
                <p id="price-{{ section.id }}" class="text-xl tracking-tight text-gray-900">{{ selected_variant.price | money }} <span class="text-xs">inkl. MwSt.</span></p>
              {% when 'variant_selector' %}
                <div>
                    {%  unless product.has_only_default_variant %}
                        <variant-selector data-url="{{ product.url }}" data-section="{{ section.id }}">
                            
                            {% for option in product.options_with_values %}
                                <h2 class="text-sm font-medium text-gray-900 mt-6 mb-3">{{ option.name }}</h2>
                                <div class="flex flex-col gap-2">
                                    {% for value in option.values %}
                                    <label class="flex cursor-pointer rounded-md border border-blue w-fit px-3 py-3 text-sm focus:outline-hidden sm:flex-1" id="label-{{ forloop.index }}">
                                        <input type="radio" name="shipping-choice" value="{{ value | escape }}" class="sr-only" id="input-{{ forloop.index }}" data-label="label-{{ forloop.index }}">
                                        <span>{{ value }}</span>
                                    </label>
                                    {% endfor %}
                                    
                                </div>
                                <script type="application/json">
                                    {{ product.variants | json }}
                                </script>
                            {% endfor %}

                        </variant-selector>
                    {% endunless %}
                  </div>
                {% when 'quantity' %}
                    <div class="mt-6">
                        <label for="Quantity-{{ section.id }}" class="block text-sm/6 font-medium text-gray-900">Anzahl</label>
                        <div class="mt-2">
                          <input type="number" name="quantity" id="Quantity-{{ section.id }}" value="1" min="1" class="block w-fit rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline-2 focus:-outline-offset-2 focus:outline-blue sm:text-sm/6">
                        </div>
                      </div>
                {% when 'description' %}
                    <div class="mt-6 prose">
                        <h3 class="sr-only">Beschreibung</h3>
              
                        <div class="space-y-6 text-base text-gray-700">
                          <p>
                            {{ product.description }}
                          </p>
                        </div>
                      </div>

            {% when 'checkout_buttons' %}
                <div class="mt-10 flex">
                    <button type="submit" name="add" class="transition-all flex max-w-xs flex-1 items-center justify-center rounded-md border border-transparent bg-blue px-8 py-3 text-base font-medium text-white hover:bg-blue-dark hover:cursor-pointer focus:outline-hidden sm:w-full"
                      {% if selected_variant.available == false %}
                      disabled
                      {% endif %}
                  >
                      {% if selected_variant.available %}
                      In den Warenkorb legen
                      {% else %}
                      Aktuell nicht verf√ºgbar
                      {% endif %}
                  </button>
                </div>
            {% endcase %}
          
        {% endfor %}
        
        {% endform %}
        </div>

      </div>
    </div>
  </div>
  
  {% schema %}

  {
    "name": "Product",
    "blocks": [
      {
        "type": "vendor",
        "name": "Vendor",
        "limit": 1
      },
      {
        "type": "title",
        "name": "Title",
        "limit": 1
      },
      {
        "type": "price",
        "name": "Price",
        "limit": 1
      },
      {
        "type": "variant_selector",
        "name": "Variant Selector",
        "limit": 1
      },
      {
        "type": "quantity",
        "name": "Quantity",
        "limit": 1
      },
      {
        "type": "description",
        "name": "Description",
        "limit": 1
      },
      {
        "type": "checkout_buttons",
        "name": "Checkout Buttons",
        "limit": 1
      }
    ]
  }

  {% endschema %}

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const tabs = document.querySelectorAll('[role="tab"]');
      const tabPanels = document.querySelectorAll('[role="tabpanel"]');
    
      function handleTabClick(event) {
        const selectedTab = event.currentTarget;
        const targetPanelId = selectedTab.getAttribute('aria-controls');
    
        // Hide all tab panels
        tabPanels.forEach(panel => {
          panel.classList.add('hidden');
        });
    
        // Remove selected styles from all tabs
        tabs.forEach(tab => {
          tab.querySelector('.ring-2').classList.remove('ring-indigo-500');
        });
    
        // Show the selected tab panel
        document.getElementById(targetPanelId).classList.remove('hidden');
    
        // Add selected styles to the clicked tab
        selectedTab.querySelector('.ring-2').classList.add('ring-indigo-500');
      }
    
      // Add click event listeners to all tabs
      tabs.forEach(tab => {
        tab.addEventListener('click', handleTabClick);
      });
    
      // Initially show the first tab panel
      if (tabPanels.length > 0) {
        tabPanels[0].classList.remove('hidden');
        tabs[0].querySelector('.ring-2').classList.add('ring-indigo-500');
      }
    });
    </script>

<script>

        class VariantSelector extends HTMLElement {
        constructor() {
            super();
            this.addEventListener('change', this.handleChange);
        }
    
        connectedCallback() {
            this.inputs = Array.from(this.querySelectorAll('input[type="radio"]'));
            this.inputs.forEach(input => {
                input.addEventListener('change', this.updateLabelStyles.bind(this));
            });
            this.setInitialSelection();
        }
    
        setInitialSelection() {
            const urlParams = new URLSearchParams(window.location.search);
            const variantId = urlParams.get('variant');
            if (variantId) {
                this.setVariantById(variantId);
            } else if (this.inputs.length > 0) {
                this.inputs[0].checked = true;
                this.updateLabelStyles();
                this.handleChange();
            }
        }
    
        setVariantById(variantId) {
            const variant = this.getVariantJson().find(variant => variant.id == variantId);
            if (variant) {
                variant.options.forEach((option, index) => {
                    const input = this.inputs.find(input => input.value === option);
                    if (input) {
                        input.checked = true;
                    }
                });
                this.updateLabelStyles();
                this.handleChange();
            }
        }
    
        handleChange(event) {
            this.getSelectedOptions();
            this.getSelectedVariant();
            if (this.currentVariant) {
                this.updateURL();
                this.updateFormID();
                this.updatePrice();
            }
        }
    
        getSelectedOptions() {
            this.options = this.inputs.filter(input => input.checked).map(input => input.value);
        }
    
        getVariantJson() {
            this.variantData = this.variantData || JSON.parse(this.querySelector('[type="application/json"]').textContent);
            return this.variantData;
        }
    
        getSelectedVariant() {
            this.currentVariant = this.getVariantJson().find(
                (variant) => {
                    return variant.options.every(
                        (option, index) => this.options[index] === option
                    );
                }
            );
        }
    
        updateURL() {
            window.history.replaceState({}, '', `${this.getAttribute('data-url')}?variant=${this.currentVariant.id}`);
        }
    
        updateFormID() {
            const form_input = document.querySelector(`#product-form input[name="id"]`);
            form_input.value = this.currentVariant.id;
        }
    
        updatePrice() {
            fetch(`${this.getAttribute('data-url')}?variant=${this.currentVariant.id}&section_id=${this.getAttribute('data-section')}`)
                .then((response) => response.text())
                .then((responseText) => {
                    const id = `price-${this.getAttribute('data-section')}`;
                    const html = new DOMParser().parseFromString(responseText, 'text/html');
    
                    const oldPrice = document.getElementById(id);
                    const newPrice = html.getElementById(id);
    
                    if (oldPrice && newPrice) {
                        oldPrice.innerHTML = newPrice.innerHTML;
                    }
                });
        }
    
        updateLabelStyles() {
            this.inputs.forEach(input => {
                const label = this.querySelector(`#${input.dataset.label}`);
                if (input.checked) {
                    label.classList.add('bg-blue', 'text-white');
                } else {
                    label.classList.remove('bg-blue', 'text-white');
                }
            });
        }
    }
    
    customElements.define('variant-selector', VariantSelector);
  
</script>